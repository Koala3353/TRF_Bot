package com.general_hello.bot.events;

import com.general_hello.Config;
import com.general_hello.bot.database.DataUtils;
import com.general_hello.bot.objects.*;
import com.general_hello.bot.utils.EODUtil;
import com.general_hello.bot.utils.Util;
import me.xdrop.fuzzywuzzy.FuzzySearch;
import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.entities.Guild;
import net.dv8tion.jda.api.entities.Member;
import net.dv8tion.jda.api.entities.Role;
import net.dv8tion.jda.api.entities.User;
import net.dv8tion.jda.api.entities.channel.concrete.TextChannel;
import net.dv8tion.jda.api.events.interaction.ModalInteractionEvent;
import net.dv8tion.jda.api.events.interaction.component.ButtonInteractionEvent;
import net.dv8tion.jda.api.events.interaction.component.GenericSelectMenuInteractionEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import net.dv8tion.jda.api.interactions.components.ActionRow;
import net.dv8tion.jda.api.interactions.components.buttons.Button;
import net.dv8tion.jda.api.interactions.components.text.TextInput;
import net.dv8tion.jda.api.interactions.components.text.TextInputStyle;
import net.dv8tion.jda.api.interactions.modals.Modal;
import org.jetbrains.annotations.NotNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.awt.*;
import java.time.OffsetDateTime;
import java.time.ZoneId;
import java.util.List;
import java.util.*;
import java.util.concurrent.atomic.AtomicBoolean;

@SuppressWarnings("ConstantConditions")
public class OnButtonClick extends ListenerAdapter {
    private static final Logger LOGGER = LoggerFactory.getLogger(OnButtonClick.class);
    @Override
    public void onButtonInteraction(@NotNull ButtonInteractionEvent event) {
        // users can spoof this id so be careful what you do with this
        String[] id = event.getComponentId().split(":"); // this is the custom id we specified in our button
        String authorId = id[0];

        if (id.length == 1) {
            return;
        }

        String type = id[1];

        // When storing state like this is it is highly recommended doing some kind of verification that it was generated by you, for instance a signature or local cache
        if (!authorId.equals("0000") && !authorId.equals(event.getUser().getId())) {
            event.reply("You can't press this button").setEphemeral(true).queue();
            return;
        }

        User author = event.getUser();
        Member member = event.getUser().getMutualGuilds().get(0).getMember(author);
        EmbedBuilder eodReportEmbed;
        switch (type) {
            case "B1roleVerification":
                if (event.getMember().getRoles().contains(event.getGuild().getRoleById("1065330260947771553"))) {
                    event.reply("You have already verified yourself.").setEphemeral(true).queue();
                    return;
                }
                event.getGuild().addRoleToMember(event.getMember(), event.getGuild().getRoleById("1065330260947771553")).queue();
                event.reply("You have been verified!").setEphemeral(true).queue();
                break;
            case "customQuestionAnswer":
                int questionNum = Integer.parseInt(id[2]);
                LinkedList<String> list = CustomQuestion.userToAnswers.getOrDefault(event.getUser().getIdLong(), new LinkedList<>());
                list.add(id[4]);
                CustomQuestion.userToAnswers.put(event.getUser().getIdLong(), list);
                long idLong = event.getUser().getIdLong();
                member = event.getUser().getMutualGuilds().get(0).getMember(event.getUser());
                List<String> questions = DataUtils.getQuestionsList(idLong);
                if (questions.size() == questionNum-3) {
                    // END OF EOD REPORT
                    event.editMessageEmbeds(EODUtil.getEODReportEmbed(member, 99, id[3]).build())
                            .setComponents()
                            .queue();
                    author = event.getUser();
                    DataUtils.setLastAnsweredTime(author.getIdLong(), id[3]);
                    EmbedBuilder eodSummary;
                    eodSummary = EODUtil.getEODReportEmbed(member, 100, id[3]);
                    Util.getChannelFromRole(member).sendMessage(member.getAsMention()).addEmbeds(eodSummary.build()).queue();

                    Timer timer = new Timer(true);
                    EODCleanupTask eodTask = new EODCleanupTask(member, String.valueOf(DataUtils.getUrge(event.getUser().getIdLong())), event, author, id);
                    timer.schedule(eodTask, 10);
                    return;
                }
                event.editMessageEmbeds(EODUtil.getEODReportEmbed(member, questionNum+1, id[3]).build())
                        .setComponents(EODUtil.getActionRow(questionNum+1, id[3]))
                        .queue();
                break;
            case "eodReport":
                // EOD Report
                switch (id[2]) {
                    // For first question
                    case "RelapseYes":
                        eodReportEmbed = EODUtil.getEODReportEmbed(member, 2, id[3]);
                        event.editMessageEmbeds(eodReportEmbed.build()).setComponents(
                                EODUtil.getActionRow(2, id[3])
                        ).queue();
                        DataUtils.setRelapse(author.getIdLong(), true);
                        DataUtils.incrementRelapseCount(author.getIdLong());
                        break;
                    case "RelapseNo":
                        eodReportEmbed = EODUtil.getEODReportEmbed(member, 2, id[3]);
                        event.editMessageEmbeds(eodReportEmbed.build()).setComponents(
                                EODUtil.getActionRow(2, id[3])
                        ).queue();
                        DataUtils.setRelapse(author.getIdLong(), false);
                        break;
                    // For second question
                    case "ColorGreen":
                        eodReportEmbed = EODUtil.getEODReportEmbed(member, 3, id[3]);
                        event.editMessageEmbeds(eodReportEmbed.build()).setComponents(
                                EODUtil.getActionRow(3, id[3])
                        ).queue();

                        DataUtils.setColor(author.getIdLong(), "Green");
                        break;
                    case "ColorYellow":
                        eodReportEmbed = EODUtil.getEODReportEmbed(member, 3, id[3]);
                        event.editMessageEmbeds(eodReportEmbed.build()).setComponents(
                                EODUtil.getActionRow(3, id[3])
                        ).queue();

                        DataUtils.setColor(author.getIdLong(), "Yellow");
                        break;
                    case "ColorRed":
                        eodReportEmbed = EODUtil.getEODReportEmbed(member, 3, id[3]);
                        event.editMessageEmbeds(eodReportEmbed.build()).setComponents(
                                EODUtil.getActionRow(3, id[3])
                        ).queue();

                        DataUtils.setColor(author.getIdLong(), "Red");
                        break;
                }
                break;
            case "takequiz":
                long channelId = Long.parseLong(id[2]);
                //QuizSetup
                String roleId = DataUtils.getQuizQuestionContent(channelId, QuizSetup.REQUIRED_ROLE_ID, 1);
                // check if the user has the required role
                if (roleId != null) {
                    Guild guild = event.getUser().getMutualGuilds().get(0);
                    Role role = guild.getRoleById(roleId);
                    if (!guild.getMember(event.getUser()).getRoles().contains(role)) {
                        event.reply("You don't have the required role to take this quiz.").setEphemeral(true).queue();
                        return;
                    }
                }
                roleId = DataUtils.getQuizQuestionContent(channelId, QuizSetup.ROLE_ID, 1);
                if (roleId != null) {
                    Guild guild = event.getUser().getMutualGuilds().get(0);
                    Role role = guild.getRoleById(roleId);
                    if (guild.getMember(event.getUser()).getRoles().contains(role)) {
                        event.reply("You already took this quiz.").setEphemeral(true).queue();
                        return;
                    }
                }
                event.reply("Kindly check your DMs for the quiz. If you didn't receive any kindly allow the bot to message you.").setEphemeral(true).queue();
                event.getUser().openPrivateChannel().queue((channel) -> {
                    channel.sendMessageEmbeds(QuizSetup.buildEmbed(1, channelId).build())
                            .setComponents(QuizSetup.buildActionRow(1, channelId)).queue();
                });
                break;
            case "quizsetup":
                String setup = id[2];
                switch (setup) {
                    case "channel":
                        TextInput subject = TextInput.create("channel", "Kindly input the channel ID here.", TextInputStyle.SHORT)
                                .setPlaceholder("Channel ID")
                                .setMinLength(17)
                                .setMaxLength(22)
                                .build();
                        Modal modal = Modal.create("quizsetup:channel", "Answer")
                                .addActionRows(ActionRow.of(subject))
                                .build();
                        event.replyModal(modal).queue();
                        break;
                    case "role":
                        subject = TextInput.create("role", "Kindly input the role ID here.", TextInputStyle.SHORT)
                                .setPlaceholder("Role ID")
                                .setMinLength(17)
                                .setMaxLength(22)
                                .build();
                        modal = Modal.create("quizsetup:role", "Answer")
                                .addActionRows(ActionRow.of(subject))
                                .build();
                        event.replyModal(modal).queue();
                        break;
                    case "reqrole":
                        subject = TextInput.create("role", "Kindly input the role ID here.", TextInputStyle.SHORT)
                                .setPlaceholder("Role ID")
                                .setMinLength(17)
                                .setMaxLength(22)
                                .build();
                        modal = Modal.create("quizsetup:reqrole", "Answer")
                                .addActionRows(ActionRow.of(subject))
                                .build();
                        event.replyModal(modal).queue();
                        break;
                    case "question1":
                        subject = TextInput.create("question", "Kindly input the question to ask here.", TextInputStyle.SHORT)
                                .setPlaceholder("Question")
                                .build();
                        TextInput options = TextInput.create("options", "Options here. Separate each with %&", TextInputStyle.SHORT)
                                .setPlaceholder("Each option needs to be separated by %&")
                                .build();
                        TextInput correctAnswer = TextInput.create("correctanswer", "Correct answer here.", TextInputStyle.SHORT)
                                .setPlaceholder("The correct answer must be within the options")
                                .build();
                        modal = Modal.create("quizsetup:question1", "Answer")
                                .addActionRows(ActionRow.of(subject), ActionRow.of(options), ActionRow.of(correctAnswer))
                                .build();

                        event.replyModal(modal).queue();
                        break;
                    case "newquestion":
                        subject = TextInput.create("question", "Kindly input the question to ask here.", TextInputStyle.SHORT)
                                .setPlaceholder("Question")
                                .build();
                        options = TextInput.create("options", "Options here. Separate each with %&", TextInputStyle.SHORT)
                                .setPlaceholder("Each option needs to be separated by %&")
                                .build();
                        correctAnswer = TextInput.create("correctanswer", "Correct answer here.", TextInputStyle.SHORT)
                                .setPlaceholder("The correct answer must be within the options")
                                .build();
                        modal = Modal.create("quizsetup:question1", "Answer")
                                .addActionRows(ActionRow.of(subject), ActionRow.of(options), ActionRow.of(correctAnswer))
                                .build();

                        event.replyModal(modal).queue();
                        break;
                    case "finish":
                        QuizSetup quizSetup = QuizSetup.getQuizSetup(event.getUser().getIdLong());
                        if (!quizSetup.finish()) {
                            Guild guild = event.getUser().getMutualGuilds().get(0);
                            TextChannel textChannel = guild.getTextChannelById(quizSetup.getChannelId());
                            EmbedBuilder embedBuilder = new EmbedBuilder();
                            embedBuilder.setTitle("Quiz");
                            embedBuilder.setColor(Color.blue);
                            embedBuilder.setFooter(guild.getName(), guild.getIconUrl());
                            embedBuilder.setDescription(Config.get("message"));
                            textChannel.sendMessageEmbeds(embedBuilder.build()).setActionRow(
                                    Button.primary("0000:takequiz:" + quizSetup.getChannelId(), "Take the quiz!")
                            ).queue();
                            event.editMessage("Quiz setup finished!").setActionRow(
                                    Button.success("smth", "Successfully sent the quiz to the channel").asDisabled()
                            ).queue();
                        } else {
                            event.editMessage("Quiz setup failed due to a quiz already made in the channel!").setActionRow(
                                    Button.danger("smth", "Failed to send the quiz to the channel").asDisabled()
                            ).queue();
                        }
                        quizSetup.delete(event.getUser().getIdLong());
                        break;
                }
                break;
            default:
                LOGGER.warn("Unknown button type: " + type);
                event.deferEdit().queue();
                break;
        }
    }

    @Override
    public void onModalInteraction(ModalInteractionEvent event) {
        String[] split = event.getModalId().split(":");
        if (split[0].equals("quizsetup")) {
            String setup = split[1];
            switch (setup) {
                case "channel" -> {
                    String channelId = event.getValue("channel").getAsString();
                    long idLong = Long.parseLong(channelId);
                    Guild guild = event.getUser().getMutualGuilds().get(0);
                    TextChannel channel = guild.getTextChannelById(idLong);
                    if (channel == null) {
                        event.editMessage("Invalid channel ID. Setup Cancelled").setComponents().queue();
                        return;
                    }
                    new QuizSetup(event.getUser().getIdLong(), idLong);
                    event.editMessage("Role to give to the user upon getting perfect?")
                            .setActionRow(Button.primary("0000:quizsetup:role", "Answer")).queue();
                }
                case "role" -> {
                    String roleId = event.getValue("role").getAsString();
                    long idLong = Long.parseLong(roleId);
                    Guild guild = event.getUser().getMutualGuilds().get(0);
                    Role role = guild.getRoleById(idLong);
                    QuizSetup quizSetup = QuizSetup.getQuizSetup(event.getUser().getIdLong());
                    if (role == null) {
                        quizSetup.delete(idLong);
                        event.editMessage("Invalid role ID. Setup Cancelled").setComponents().queue();
                        return;
                    }
                    quizSetup.setRewardRole(idLong).save(event.getUser().getIdLong());
                    event.editMessage("What will the required role be?")
                            .setActionRow(Button.primary("0000:quizsetup:reqrole", "Answer")).queue();
                }
                case "reqrole" -> {
                    String roleId = event.getValue("role").getAsString();
                    long idLong = Long.parseLong(roleId);
                    Guild guild = event.getUser().getMutualGuilds().get(0);
                    Role role = guild.getRoleById(idLong);
                    QuizSetup quizSetup = QuizSetup.getQuizSetup(event.getUser().getIdLong());
                    if (role == null) {
                        quizSetup.delete(idLong);
                        event.editMessage("Invalid role ID. Setup Cancelled").setComponents().queue();
                        return;
                    }
                    quizSetup.setRequiredRole(idLong).save(event.getUser().getIdLong());
                    event.editMessage("What will the first question content be?")
                            .setActionRow(Button.primary("0000:quizsetup:question1", "Answer")).queue();
                }
                case "question1" -> {
                    String question = event.getValue("question").getAsString();
                    String options = event.getValue("options").getAsString();
                    String correctAnswer = event.getValue("correctanswer").getAsString();
                    QuizSetup quizSetup = QuizSetup.getQuizSetup(event.getUser().getIdLong());

                    List<String> choices = Arrays.asList(options.split("%&"));
                    correctAnswer = FuzzySearch.extractOne(correctAnswer, choices).getString();
                    quizSetup.newQuestion(question, correctAnswer, choices).save(event.getUser().getIdLong());
                    event.editMessage("Add question number " + (quizSetup.getQuestionCount() + 1) + "?")
                            .setActionRow(Button.success("0000:quizsetup:newquestion", "Yes"),
                                    Button.danger("0000:quizsetup:finish", "No")).queue();
                }
            }
        } else if (split[0].equals("hierarchicalRoles")) {
            long giveRoleId = Long.parseLong(event.getValue("giveroleid").getAsString());
            String[] requiredroleids = event.getValue("requiredroleid").getAsString().split(",");
            HierarchicalRoles hierarchicalRoles = new HierarchicalRoles(giveRoleId);

            for (String requiredRoleId : requiredroleids) {
                hierarchicalRoles = hierarchicalRoles.addRequiredRole(Long.parseLong(requiredRoleId));
            }
            hierarchicalRoles.save();

            event.reply("Saved!").setEphemeral(true).queue();
        }
    }

    @Override
    public void onGenericSelectMenuInteraction(@NotNull GenericSelectMenuInteractionEvent event) {
        String value = event.getValues().get(0).toString();
        String id = event.getComponentId();

        String[] ids = id.split(":");
        String authorId = ids[0];

        if (!authorId.equals("0000") && !authorId.equals(event.getUser().getId())) {
            event.reply("You can't select this.").setEphemeral(true).queue();
            return;
        }

        User author = event.getUser();
        Member member = event.getUser().getMutualGuilds().get(0).getMember(author);

        switch (ids[1]) {
            case "selectroles":
                AtomicBoolean hasRole = new AtomicBoolean(false);
                member.getRoles().forEach(role -> {
                    if (role.getName().startsWith("AG")) {
                        hasRole.set(true);
                    }
                });

                if (hasRole.get()) {
                    event.reply("You already have a group. Please contact a staff member to remove it.").setEphemeral(true).queue();
                    return;
                }
                long roleId = Long.parseLong(value);
                if (DataUtils.getCount(roleId) >= Integer.parseInt(Config.get("limit"))) {
                    event.reply("This role is full. Please select another one.").setEphemeral(true).queue();
                    return;
                }

                if (DataUtils.isNewUser(member.getIdLong())) {
                    Timer timer = new Timer(true);
                    timer.schedule(new NewMemberEODTask(event.getMember()), 900000);
                }

                event.getGuild().addRoleToMember(member, event.getGuild().getRoleById(roleId)).queue();
                event.getGuild().addRoleToMember(member, event.getGuild().getRoleById("1065381062668206100")).queue();
                DataUtils.addSelectRoleCount(roleId);
                event.reply("Added role " + event.getGuild().getRoleById(Long.parseLong(value)).getName()).setEphemeral(true).queue();
                int count = DataUtils.getCount(roleId);
                System.out.println("COUNT: " + count);

                int limit = Integer.parseInt(Config.get("limit"));
                System.out.println("LIMIT: " + limit);
                if (count >= limit) {
                    SelectRole.remove(roleId);
                    LOGGER.info("Removed role " + event.getGuild().getRoleById(roleId).getName());
                    Util.sendOwnerDM("Removed role " + event.getGuild().getRoleById(roleId).getName() + ". Kindly delete the menu and resend it.");
                }
                break;
            case "eodReport":
                int rating = Integer.parseInt(value);
                int questionNum = 4;
                DataUtils.setUrge(author.getIdLong(), rating);

                List<String> questionsList = DataUtils.getQuestionsList(event.getUser().getIdLong());
                if (!questionsList.isEmpty()) {
                    event.editMessageEmbeds(EODUtil.getEODReportEmbed(member, questionNum, ids[3]).build())
                            .setComponents(EODUtil.getActionRow(questionNum, ids[3])).queue();
                } else {
                    event.editMessageEmbeds(EODUtil.getEODReportEmbed(member, 99, ids[3]).build()).setComponents().queue();
                    Util.logInfo("EOD Report for " + member.getEffectiveName() + " has been submitted with rating " + rating, OnButtonClick.class);
                    EmbedBuilder eodSummary;
                    eodSummary = EODUtil.getEODReportEmbed(member, 100, ids[3]);
                    Util.getChannelFromRole(member).sendMessage(member.getAsMention()).addEmbeds(eodSummary.build()).queue();

                    Timer timer = new Timer(true);
                    EODCleanupTask eodTask = new EODCleanupTask(member, value, event, author, ids);
                    timer.schedule(eodTask, 10);
                }
                break;
            case "quizoptions":
                long channelId = Long.parseLong(ids[2]);
                int questionNumber = Integer.parseInt(ids[3]);
                User user = event.getUser();
                long idLong = user.getIdLong();
                if (questionNumber==1) {
                    new QuizProgress(channelId, value, idLong);
                } else {
                    QuizProgress quizProgress = QuizProgress.getQuizProgress(idLong);
                    quizProgress.addAnswer(value).save(idLong);
                }

                if (DataUtils.getQuizQuestionContent(channelId, QuizSetup.QUESTION, questionNumber+1).equals("")) {
                    // end quiz
                    QuizProgress quizProgress = QuizProgress.getQuizProgress(idLong);
                    int correctAnswers = 0;
                    LinkedList<String> answers = quizProgress.getAnswers();
                    for (int i = 0; i < answers.size(); i++) {
                        String answer = answers.get(i);
                        if (answer.equals(DataUtils.getQuizQuestionContent(channelId, QuizSetup.ANSWERS, i+1))) {
                            correctAnswers++;
                        }
                    }

                    EmbedBuilder embedBuilder = new EmbedBuilder();
                    embedBuilder.setTitle("Quiz Results");
                    embedBuilder.setTimestamp(OffsetDateTime.now(ZoneId.of("UTC-6")));
                    embedBuilder.setFooter("Quiz by " + user.getAsTag(), user.getAvatarUrl());
                    if (correctAnswers == answers.size()) {
                        embedBuilder.setDescription("You got all the answers correct!");
                        roleId = Long.parseLong(DataUtils.getQuizQuestionContent(channelId, QuizSetup.ROLE_ID, 1));
                        Guild guild = event.getUser().getMutualGuilds().get(0);
                        Role role = guild.getRoleById(roleId);
                        guild.addRoleToMember(event.getUser(), role).queue();
                        embedBuilder.setColor(Color.GREEN);
                        event.editMessageEmbeds(embedBuilder.build()).setActionRow(
                                Button.success("blabla", "Congratulations!").asDisabled()
                        ).queue();
                    } else {
                        embedBuilder.setDescription("You got " + correctAnswers + " out of " + answers.size() + " correct. Retry?");
                        embedBuilder.setColor(Color.RED);
                        event.editMessageEmbeds(embedBuilder.build()).setActionRow(
                                Button.success("0000:takequiz:" + channelId, "Retry")
                        ).queue();
                    }
                    return;
                }
                EmbedBuilder embedBuilder = QuizSetup.buildEmbed(questionNumber+1, channelId);
                event.editMessageEmbeds(embedBuilder.build()).setComponents(QuizSetup.buildActionRow(questionNumber+1, channelId)).queue();
                break;
        }
    }
}
